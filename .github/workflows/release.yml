name: Release Rust Binary

on:
  push:
    tags:
      - 'v*'  # 如 v1.0.0
  workflow_dispatch:  # 添加手动触发
    inputs:
      target_os:
        description: 'Target OS (linux/windows/macos/all)'
        required: true
        default: 'all'
        type: choice
        options:
          - linux
          - windows
          - macos
          - all

env:
  PROJECT_NAME: long

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix:
        include: ${{ fromJSON(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        shell: bash
        run: |
          mkdir -p dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/${PROJECT_NAME}.exe dist/${PROJECT_NAME}-${{ matrix.target }}.exe
          else
            cp target/${{ matrix.target }}/release/${PROJECT_NAME} dist/${PROJECT_NAME}-${{ matrix.target }}
          fi

      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files:
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: long-${{ matrix.target_short }}
          path: dist/

      - name: Notice for manual run
        if: github.event_name == 'workflow_dispatch'
        run: echo "[long] 手动触发仅编译产物，不上传 Release。请通过 tag push 发布正式 Release。"

      - name: List dist contents
        run: ls -l dist

  # 添加 setup 作业来处理手动触发时的矩阵生成
  setup:
    name: Determine build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          # 默认全平台构建矩阵（多行->单行JSON）
          MATRIX=$(cat <<EOF
          [
            {"os": "ubuntu-latest", "target": "x86_64-unknown-linux-gnu", "ext": "", "target_short": "linux"},
            {"os": "windows-latest", "target": "x86_64-pc-windows-msvc", "ext": ".exe", "target_short": "windows"},
            {"os": "macos-latest", "target": "x86_64-apple-darwin", "ext": "", "target_short": "macos"}
          ]
          EOF
          )
          MATRIX=$(echo "$MATRIX" | jq -c .)

          # 如果是手动触发且不是全平台
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.target_os }}" != "all" ]]; then
            FILTERED=$(echo "$MATRIX" | jq -c '[.[] | select(.target_short == "'${{ inputs.target_os }}'")]')
            echo "matrix=$FILTERED" >> $GITHUB_OUTPUT
          else
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          fi